function getCards()
    cards = {}

    	for _,card in ipairs(self.getObjects()) do
	        script = card.gm_notes
	        if script != '' then
	            data = JSON.decode(script)
	            cards[card.guid] = data
	        end
	    end

    return cards
end

function getPicks(team, cards, playerCount, cardsToUse)
    letters = {}

    for guid, card in pairs(cards) do
        canUse = false
        for set,shouldUse in pairs(cardsToUse) do
            needsMorePlayers = playerCount == 5 and card.tags.minsix
            if card.tags[set] and shouldUse and not needsMorePlayers then
                canUse = true
            end
        end
        if canUse then
            if card.team == team then
	                if letters[card.letter] == nil then
	                    letters[card.letter] = { max = 0 }
	                end
	                letter = letters[card.letter]
	                letter[tostring(letter.max)] = guid
	                letter.max = letter.max + 1
            end
        end
    end

    --broadcastToAll(JSON.encode(letters), {1,1,1})

    	picks = {}

    	for letter, group in pairs(letters) do
	        index = math.random(0, group.max-1)
	        picks[#picks+1] = group[tostring(index)]
    	end

    --broadcastToAll(JSON.encode(picks), {1,1,1})

    return picks
end

function getAllNeutralsPicks(cards, playerCount, cardsToUse)
    list = {}

    for guid, card in pairs(cards) do
        canUse = false
        for set,shouldUse in pairs(cardsToUse) do
            if card.tags[set] and shouldUse and not card.tags.noallneutrals then
                canUse = true
            end
        end
        if canUse then
            if card.team == 'neutral' then
                list[#list+1] = guid
            end
        end
    end

    return list
end

function incOffset(xoffset, yoffset)
    if xoffset > 14 then
        yoffset = yoffset+5
        xoffset = 0
    else
        xoffset = xoffset+4
    end
    return xoffset, yoffset
end

function addCards(guids, count, cards)
    starting_count = #guids
    while count > 0 and #guids < (starting_count + #cards) do
        card = cards[math.random(1, #cards)]
        contains = false
        for _, guid in ipairs(guids) do
            if guid == card then
                contains = true
            end
        end
        if contains == false then
            guids[#guids+1] = card
            count = count - 1
        end
    end
end

function getCardGuids(playerCount, hunters, shadows, neutrals, gameMode)
    num_hunters = 2
    num_shadows = 2
    if playerCount > 7 then
        num_hunters = 3
        num_shadows = 3
    end

    num_neutrals = 0
    if playerCount > 4 then
        num_neutrals = num_neutrals + 1
    end
    if playerCount > 5 then
        num_neutrals = num_neutrals + 1
    end
    if playerCount == 7 then
        num_neutrals = num_neutrals + 1
    end
    if playerCount > 8 then
        num_neutrals = num_neutrals + 1
    end
    if playerCount > 9 then
        num_neutrals = num_neutrals + 1
    end

    if gameMode.allneutrals then
        num_hunters = 0
        num_shadows = 0
        num_neutrals = playerCount
    end

    guids = {}

    addCards(guids, num_hunters, hunters)
    addCards(guids, num_shadows, shadows)
    addCards(guids, num_neutrals, neutrals)

    return guids
end

function dealCards(playerCount, hunters, shadows, neutrals, gameMode)
    guids = getCardGuids(playerCount, hunters, shadows, neutrals, gameMode)

    cardsToGroup = {}
    xoffset = 0
    yoffset = 0

    for _, guid in ipairs(guids) do
        cardsToGroup[#cardsToGroup+1] = self.takeObject({
            guid = guid,
            position = {-39.2 + xoffset, 1.5, -0.35 - yoffset}
        })
        	xoffset, yoffset = incOffset(xoffset, yoffset)
    end

    function finalGroup()
        groupedCards = group(cardsToGroup)

        function finalDeal()
            deck = groupedCards[1]
            deck.shuffle()
            deck.shuffle()
            deck.shuffle()
            for _,player in ipairs(getSeatedPlayers()) do
                deck.deal(1, player)
            end

            destroyObject(self)
        end

        Timer.create({
            identifier = tostring({}),
            function_name = 'finalDeal',
            function_owner = self,
            delay = 1,
            repetitions = 1
        })
    end

    Timer.create({
        identifier = tostring({}),
        function_name = 'finalGroup',
        function_owner = self,
        delay = 1,
        repetitions = 1
    })
end

function startGame(params)
    playerCount = params.playerCount
    cardsToUse = params.cardsToUse
    gameMode = params.gameMode

    minPlayerCount = 4
    if gameMode.allneutrals then minPlayerCount = 3 end
    if playerCount < minPlayerCount then
        broadcastToAll("Not enough players to start the game.")
        return false
    end

    	cards = getCards()

    --broadcastToAll(JSON.encode(cards), {1,1,1})

    hunters = getPicks('hunter', cards, playerCount, cardsToUse, gameMode)
    shadows = getPicks('shadow', cards, playerCount, cardsToUse, gameMode)
    neutrals = getPicks('neutral', cards, playerCount, cardsToUse, gameMode)
    if gameMode.allneutrals then
        neutrals = getAllNeutralsPicks(cards, playerCount, cardsToUse)
    end

    maxPlayers = 0
    for _,_ in ipairs(hunters) do maxPlayers = maxPlayers + 1 end
    for _,_ in ipairs(shadows) do maxPlayers = maxPlayers + 1 end
    if gameMode.allneutrals then maxPlayers = 0 end
    for _,_ in ipairs(neutrals) do maxPlayers = maxPlayers + 1 end
    if playerCount > maxPlayers then
        broadcastToAll("Not enough cards for this many players.  Enable more expansions.")
        return false
    end

    dealCards(playerCount, hunters, shadows, neutrals, gameMode)

    getObjectFromGUID('62a7a0').shuffle()
    getObjectFromGUID('96fa0d').shuffle()
    getObjectFromGUID('212f10').shuffle()

    area_cards = getObjectFromGUID('26621c')
    area_cards.shuffle()

    game_board = getObjectFromGUID('ed0d18')
    for _,snappoint in ipairs(game_board.getSnapPoints()) do
        area_card = area_cards.takeObject({
            position = game_board.positionToWorld(snappoint.position),
            rotation = { snappoint.rotation.x, snappoint.rotation.y + 180, snappoint.rotation.z }
        })
        area_card.setLock(true)
    end

    return true
end
